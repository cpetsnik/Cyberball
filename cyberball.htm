<!DOCTYPE html>
<html>
<head>
    <title>CyberBall </title>
    <link href="css/cyberball.css" rel="stylesheet" type="text/css" />
</head>
<body>
    <div id="preloadImages">
        <img src="spriteImages/Player/Player.png" />
    </div>
    <div id="container">
        <div id="textAndWindows">
            <table width="640px" height="260px" border="0">
                <tr>
                    <td colspan="2">
                        <p id="instructions">
                            You can throw the ball by clicking on the name or picture of another player</p>
                    </td>
                </tr>
                <tr id="trPlayerFour">
                    <td align="center" colspan="2">
                        <div>
                            <img id="imgPlayerFour" alt="Player Four" src="images/player_placeholder.png" class="photo" />
                            <br />
                            <span id="lblPlayerFourName">Player Four</span>
                            <br />
                            <img width="80px" height="87px" src="images/player_placeholder.png" id="cartoonPlayerFour"
                                class="cartoon" />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td align="left">
                        <table>
                            <tr>
                                <td>
                                    <div>
                                        <img id="imgPlayerOne" alt="Player One" src="images/player_placeholder.png" class="photo" />
                                        <br />
                                        <span id="lblPlayerOneName">Player One</span>
                                    </div>
                                </td>
                                <td>
                                    <img width="80px" height="87px" src="images/player_placeholder.png" id="cartoonPlayerOne"
                                        class="cartoon-1" />
                                        <br/>
                                        <br/>
                                    <span id="lblPlayerOneName_2">Player One</span>
                                </td>
                            </tr>
                        </table>
                    </td>
                    <td align="right">
                        <table>
                            <tr>
                                <td>
                                    <img width="80px" height="87px" src="images/player_placeholder.png" id="cartoonPlayerThree"
                                        class="cartoon-3" />
                                    <br />
                                    <span id="lblPlayerThreeName_2">Player One</span>
                                </td>
                                <td>
                                    <div>
                                        <img id="imgPlayerThree" alt="Player three" src="images/player_placeholder.png" class="photo" />
                                        <br />
                                        <span id="lblPlayerThreeName">Player Three</span>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" align="center">
                        <div>
                            <br />
                            <br />
                            <br />
                            <br />
                            <br />
                            <span id="lblPlayerTwoName">You</span>
				<span id="mq"><img src="images/TrindaBkg1.JPG.jpg" width="96px" height="128px" /></span>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
        <canvas id="myCanvas" width="640" height="565">
        </canvas>
        <div id="chatWindow">
            <textarea id="txtChatLog" rows="5" cols="32" readonly="readonly"></textarea>
            <br />
            <input class="chatbox" id="txtChatBox" />
            <a href="javascript:void(0);" id="btnChat">&nbsp;</a>
        </div>
        <p id="thankyou">
            Thank you.
            <br />
            <br />
            Please wait for further instructions...</p>
    </div>
    <script type="text/javascript" src="js/jquery-1.6.4.min.js"></script>
    <script type="text/javascript" src="js/easel.js"></script>
    <script type="text/javascript" src="spriteImages/Player/Player.js"></script>
    <script type="text/javascript" src="spriteImages/Ball/Ball_one_three.js"></script>
    <script type="text/javascript" src="spriteImages/Ball/Ball_one_two.js"></script>
    <script type="text/javascript" src="spriteImages/Ball/Ball_two_three.js"></script>
    <script type="text/javascript" src="js/Tween.js"></script>
    <script type="text/javascript">
        //Vars for Connecting Screen
        var connX = 136;
        var connY = 100;
        var connMaxX = 460;
        var connMul = 1;
        var connUpdateId = 0;

        var gameState = "";
        var deltaTime = 30 / 1000;
        var myCanvas = $("#myCanvas").get(0).getContext("2d");

        var USERID = "userid";
        var SETTINGS = "settings";
        var PICS = "pics";
        var PIC1 = "pic1";
        var PIC3 = "pic3";
        var PIC4 = "pic4";
        var CHAT = "chat";
        var P1NAME = "p1name";
        var P2NAME = "p2name";
        var P3NAME = "p3name";
        var P4NAME = "p4name";
        var SPECTATE = "spectate";


        var SETTING_3PLALL = "3plall";
        var SETTING_3PLJO = "3pljo";
        var SETTING_3PLOO = "3ploo";
        var SETTING_3PLOS = "3plos";

        var SETTING_4PLALL = "4plall";
        var SETTING_4PLCOH = "4plcoh";
        var SETTING_4PLJO = "4pljo";
        var SETTING_4PLOO = "4ploo";
        var SETTING_4PLOS = "4plos";
        var SETTING_4PLTAT = "4pltat";

        var URLVars;
        var _log = "userid,timestamp,behavior type,v1,v2\r\n";
        var playerOneName = "";
        var playerThreeName = "";
        var playerFourName = "";
        var spectator = false;
        var isFourPlayer = false;
        var fourPlayerOffset = 230 - 100;

        var totalThrows = 0;
        var schedule = "";
        var whosTurn = 1;
        var throwsMade = 0;
        var throwingTo = 0;
        var playerOneMoves = new Array();
        var playerThreeMoves = new Array();
        var playerFourMoves = new Array();

        var stage;
        var mcPlayerOne = new BitmapSequence(playerSpriteSheet);
        var mcPlayerTwo = new BitmapSequence(playerSpriteSheet);
        var mcPlayerThree = new BitmapSequence(playerSpriteSheet);
        var mcPlayerFour = new BitmapSequence(playerSpriteSheet);
        var mcBall;

        function onPlayerOneAnim(bmpSeq) {

            //console.log(bmpSeq.currentSequence.toLowerCase());
            //console.log(bmpSeq.currentEndFrame);
            if (bmpSeq.currentSequence.toLowerCase().indexOf("thrown") == -1) {
                switch (throwingTo) {
                    case 2:
                        ThrowBall("one_two");
                        break;
                    case 3:
                        ThrowBall("one_three");
                        break;
                    case 4:
                        ThrowBall("one_four");
                        break;
                }
                bmpSeq.gotoAndPlay(bmpSeq.currentSequence + "_thrown");
            } else {
                bmpSeq.gotoAndStop(bmpSeq.currentEndFrame);
            }
        }
        function onPlayerTwoAnim(bmpSeq) {
            //console.log(bmpSeq.currentSequence.toLowerCase());
            //console.log(bmpSeq.currentEndFrame);
            if (bmpSeq.currentSequence.toLowerCase().indexOf("thrown") == -1) {
                switch (throwingTo) {
                    case 1:
                        ThrowBall("two_one");
                        break;
                    case 3:
                        ThrowBall("two_three");
                        break;
                    case 4:
                        ThrowBall("two_four");
                        break;
                }
                bmpSeq.gotoAndPlay(bmpSeq.currentSequence + "_thrown");
            }
            else {
                bmpSeq.gotoAndStop(bmpSeq.currentEndFrame);
            }
        }
        function onPlayerThreeAnim(bmpSeq) {
            //console.log(bmpSeq.currentSequence.toLowerCase());
            //console.log(bmpSeq.currentEndFrame);
            if (bmpSeq.currentSequence.toLowerCase().indexOf("thrown") == -1) {
                switch (throwingTo) {
                    case 2:
                        ThrowBall("three_two");
                        break;
                    case 1:
                        ThrowBall("three_one");
                        break;
                    case 4:
                        ThrowBall("three_four");
                        break;
                }
                bmpSeq.gotoAndPlay(bmpSeq.currentSequence + "_thrown");
            }
            else {
                bmpSeq.gotoAndStop(bmpSeq.currentEndFrame);
            }
        }
        function onPlayerFourAnim(bmpSeq) {
            //console.log(bmpSeq.currentSequence.toLowerCase());
            //console.log(bmpSeq.currentEndFrame);
            if (bmpSeq.currentSequence.toLowerCase().indexOf("thrown") == -1) {
                switch (throwingTo) {
                    case 2:
                        ThrowBall("four_two");
                        break;
                    case 1:
                        ThrowBall("four_one");
                        break;
                    case 3:
                        ThrowBall("four_three");
                        break;
                }
                bmpSeq.gotoAndPlay(bmpSeq.currentSequence + "_thrown");
            }
            else {
                bmpSeq.gotoAndStop(bmpSeq.currentEndFrame);
            }
        }
        function onBallAnim() {
            mcBall.visible = false;
            switch (throwingTo) {
                case 1:
                    mcPlayerOne.gotoAndStop("catch_1");
                    break;
                case 2:
                    switch (whosTurn) {
                        case 1:
                            mcPlayerTwo.gotoAndStop("catch_3");
                            AppendToLog("catch", "player1");
                            break;
                        case 3:
                            mcPlayerTwo.gotoAndStop("catch_1");
                            AppendToLog("catch", "player3");
                            break;
                        case 4:
                            mcPlayerTwo.gotoAndStop("catch_3");
                            AppendToLog("catch", "player4");
                            break;
                    }
                    break;
                case 3:
                    mcPlayerThree.gotoAndStop("catch_3");
                    break;
                case 4:
                    switch (whosTurn) {
                        case 1:
                            mcPlayerFour.gotoAndStop("catch_3");
                            break;
                        case 2:
                            mcPlayerFour.gotoAndStop("catch_1");
                            break;
                        case 3:
                            mcPlayerFour.gotoAndStop("catch_1");
                            break;
                    }
                    break;
            }
            whosTurn = throwingTo;
            throwingTo = 0;
            ++throwsMade;
            isThrowing = false;
            Play();
        }


        function Init() {
            myCanvas = $("#myCanvas").get(0).getContext("2d");
            var connectingFor = randomBetween(5, 7);
            //$("#txtTime").val(document.location.href);
            CreateSprites();
            SetState("connecting");
            setTimeout("SetState('playing');ShowHideControls();", connectingFor * 1000);
            connUpdateId = setInterval(update, 1000 / 30);

            var ballImage = new Image();
            ballImage.src = "spriteImages/Ball/BallImage.png";
            mcBall = new Bitmap(ballImage);
            mcBall.x = 214;
            mcBall.y = 140;
            mcBall.regX = 12.5;
            mcBall.regY = 12.5;
            mcBall.visible = false;
            stage.addChild(mcBall);
        }

        function update() {
            switch (gameState) {
                case "CONNECTING":
                    myCanvas.fillStyle = "#0099FF";
                    myCanvas.clearRect(connX, 200, 30, 24);
                    connX += connMul * 100 * deltaTime;
                    myCanvas.fillRect(connX, 200, 30, 24);
                    if (connX > connMaxX) {
                        connMul = -1;
                    }
                    if (connX < 128) {
                        connMul = 1;
                    }
                    break;
            }
        }

        function SetState(stateName) {
            switch (stateName.toUpperCase()) {
                case "CONNECTING":
                    gameState = "CONNECTING";
                    myCanvas.fillStyle = "#666666";
                    myCanvas.font = "22pt Impact";
                    myCanvas.fillText("Connecting to other players...", 130, 260);
                    break;
                case "PLAYING":
                    clearInterval(connUpdateId);
                    myCanvas.clearRect(0, 0, 640, 565);
                    gameState = "PLAYING";
                    setTimeout("SayHey()", randomBetween(3, 5) * 1000);
                    break;
            }
        }
        function Play() {
            ////console.log("Throw Number - " + (throwsMade + 1));
            ////console.log("Who is Throwing? - " + whosTurn);
            throwingTo = 0;
            var randomNumber = 0;
            if (throwsMade < totalThrows) {
                switch (whosTurn) {
                    case 1:
                        ////console.log("Moves before - " + playerOneMoves[0]);
                        randomNumber = randomBetween(0, playerOneMoves[0].length - 1);
                        throwingTo = parseInt(playerOneMoves[0].charAt(randomNumber));
                        playerOneMoves[0] = playerOneMoves[0].replace(playerOneMoves[0].charAt(randomNumber), "");
                        ////console.log("Throwing to - " + throwingTo);
                        ////console.log("Moves after - " + playerOneMoves[0]);
                        setTimeout("Throw(" + throwingTo + ")", randomBetween(0, 4) * 1000);
                        if (playerOneMoves[0].length == 0) {
                            playerOneMoves.shift();
                        }
                        //Throw(whosTurn + "_" + throwingTo);
                        mcPlayerTwo.gotoAndStop("wait_3");
                        mcPlayerThree.gotoAndStop("wait_3");
                        mcPlayerFour.gotoAndStop("wait_3");
                        break;
                    case 2:
                        mcPlayerOne.gotoAndStop("wait_1");
                        mcPlayerThree.gotoAndStop("wait_3");
                        mcPlayerFour.gotoAndStop("wait_3");
                        if (spectator && isFourPlayer) {
                            var randomNumber = randomBetween(1, 15);
                            if (randomNumber <= 5) {
                                throwingTo = 1;
                                setTimeout(ThrowToOne, randomBetween(0, 4) * 1000);
                            }
                            else if (randomNumber <= 10) {
                                throwingTo = 3;
                                setTimeout(ThrowToThree, randomBetween(0, 4) * 1000);
                            }
                            else {
                                throwingTo = 4;
                                setTimeout(ThrowToFour, randomBetween(0, 4) * 1000);
                            }
                        }
                        else if (spectator && !isFourPlayer) {
                            var randomNumber = randomBetween(1, 10);
                            if (randomNumber <= 5) {
                                throwingTo = 1;
                                setTimeout(ThrowToOne, randomBetween(0, 4) * 1000);
                            }
                            else {
                                throwingTo = 3;
                                setTimeout(ThrowToThree, randomBetween(0, 4) * 1000);
                            }
                        }
                        break;
                    case 3:
                        ////console.log("Moves before - " + playerThreeMoves[0]);
                        randomNumber = randomBetween(0, playerThreeMoves[0].length - 1);
                        throwingTo = parseInt(playerThreeMoves[0].charAt(randomNumber));
                        playerThreeMoves[0] = playerThreeMoves[0].replace(playerThreeMoves[0].charAt(randomNumber), "");
                        ////console.log("Throwing to - " + throwingTo);
                        ////console.log("Moves after - " + playerThreeMoves[0]);
                        setTimeout("Throw(" + throwingTo + ")", randomBetween(0, 4) * 1000);
                        if (playerThreeMoves[0].length == 0) {
                            playerThreeMoves.shift();
                        }
                        mcPlayerOne.gotoAndStop("wait_1");
                        mcPlayerTwo.gotoAndStop("wait_1");
                        mcPlayerFour.gotoAndStop("wait_1");
                        break;
                    case 4:
                        ////console.log("Moves before - " + playerThreeMoves[0]);
                        randomNumber = randomBetween(0, playerFourMoves[0].length - 1);
                        throwingTo = parseInt(playerFourMoves[0].charAt(randomNumber));
                        playerFourMoves[0] = playerFourMoves[0].replace(playerFourMoves[0].charAt(randomNumber), "");
                        ////console.log("Throwing to - " + throwingTo);
                        ////console.log("Moves after - " + playerThreeMoves[0]);
                        setTimeout("Throw(" + throwingTo + ")", randomBetween(0, 4) * 1000);
                        if (playerFourMoves[0].length == 0) {
                            playerFourMoves.shift();
                        }
                        mcPlayerOne.gotoAndStop("wait_1");
                        mcPlayerTwo.gotoAndStop("wait_1");
                        mcPlayerThree.gotoAndStop("wait_3");
                        break;
                }
            }
            else {
                SaveLog();
            }
        }
        function Throw(throwingTo) {
            //alert(whosTurn + " TO " + throwingTo);
            switch (whosTurn) {
                case 1:
                    mcPlayerOne.gotoAndPlay("one_three");
                    AppendToLog("throw", "player1-player" + throwingTo);
                    break;
                case 2:
                    isThrowing = true;
                    switch (throwingTo) {
                        case 1:
                            mcPlayerTwo.gotoAndPlay("three_one");
                            AppendToLog("throw", "player1");
                            break;
                        case 3:
                            mcPlayerTwo.gotoAndPlay("one_three");
                            AppendToLog("throw", "player3");
                            break;
                        case 4:
                            mcPlayerTwo.gotoAndPlay("one_three");
                            AppendToLog("throw", "player4");
                            break;
                        default:
                    }
                    break;
                case 3:
                    mcPlayerThree.gotoAndPlay("three_one");
                    AppendToLog("throw", "player3-player" + throwingTo);
                    break;
                case 4:
                    switch (throwingTo) {
                        case 1:
                            mcPlayerFour.gotoAndPlay("three_one");
                            AppendToLog("throw", "player4-player" + throwingTo);
                            break;
                        case 3:
                            mcPlayerFour.gotoAndPlay("one_three");
                            AppendToLog("throw", "player4-player" + throwingTo);
                            break;
                        case 2:
                            mcPlayerFour.gotoAndPlay("three_one");
                            AppendToLog("throw", "player4-player" + throwingTo);
                            break;
                        default:
                    }
                    break;
            }
        }
        function randomBetween(min, max) {
            return min + (max - min + 1) * Math.random();
        }

        function GetURLVars(Url) {

            var queryString = unescape(Url.substring(Url.indexOf("?") + 1));
            var array = queryString.split("&");
            var vars = new Array();
            var URLkeys = new Array();
            URLkeys.push(USERID);
            URLkeys.push(SETTINGS);
            URLkeys.push(PICS);
            URLkeys.push(PIC1);
            URLkeys.push(PIC3);
            URLkeys.push(PIC4);
            URLkeys.push(CHAT);
            URLkeys.push(P1NAME);
            URLkeys.push(P2NAME);
            URLkeys.push(P3NAME);
            URLkeys.push(P4NAME);
            URLkeys.push(SPECTATE);
            //$("#txtTime").val("");
            for (var i = 0; i < array.length; i++) {
                var keyValue = array[i];
                var key = keyValue.split("=")[0];
                if (URLkeys.indexOf(key) >= 0) {
                    var value = keyValue.split("=")[1];
                    vars[key] = value;
                    //$("#txtTime").val(//$("#txtTime").val() + " " + key + "-" + value);
                }
                else {

                }
            }
            return vars;
        }
        function AddClickHandlers() {
            $("#lblPlayerOneName").click(ThrowToOne);
            $("#imgPlayerOne").click(ThrowToOne);
            $("#cartoonPlayerOne").click(ThrowToOne);

            $("#lblPlayerThreeName").click(ThrowToThree);
            $("#imgPlayerThree").click(ThrowToThree);
            $("#cartoonPlayerThree").click(ThrowToThree);

            $("#lblPlayerFourName").click(ThrowToFour);
            $("#imgPlayerFour").click(ThrowToFour);
            $("#cartoonPlayerFour").click(ThrowToFour);
        }
        function ShowHideControls() {
            URLVars = GetURLVars(document.location.href);
            $("#textAndWindows").show();
            if (URLVars[CHAT] == "true") {
                $("#chatWindow").show();
            }
            else {
                $("#chatWindow").hide();
            }
            if (URLVars[SPECTATE] && URLVars[SPECTATE] == "true") {
                spectator = true;
                $("#instructions").text("You are a spectator");
            }
            if (!spectator)
                AddClickHandlers();
            SetPlayerOneName(URLVars[P1NAME]);
            SetPlayerTwoName(URLVars[P2NAME]);
            SetPlayerThreeName(URLVars[P3NAME]);
            SetPlayerFourName(URLVars[P4NAME]);
            GetSettings();
        }
        function AddBallToStage() {
            //mcBallOneThree.callback = onBallAnim;
            mcBallOneThree.gotoAndPlay(1);
            mcBallOneThree.x = 196;
            mcBallOneThree.y = 105;
            //stage.addChild(mcBallOneThree);

            //mcBallOneTwo.callback = onBallAnim;
            mcBallOneTwo.gotoAndPlay(1);
            mcBallOneTwo.x = 196;
            mcBallOneTwo.y = 150;
            //stage.addChild(mcBallOneTwo);

            //mcBallTwoThree.callback = onBallAnim;
            mcBallTwoThree.gotoAndPlay(1);
            mcBallTwoThree.x = 345;
            mcBallTwoThree.y = 150;
            //stage.addChild(mcBallTwoThree);
        }

        function HideBalls() {
            //mcBall.visible = false;
            mcBallOneThree.visible = false;
            mcBallOneThree.gotoAndStop(0);

            mcBallOneTwo.visible = false;
            mcBallOneTwo.gotoAndStop(0);

            mcBallTwoThree.visible = false;
            mcBallTwoThree.gotoAndStop(0);
        }

        function CreateSprites() {
            //mcBall.visible = false;
            var canvas1 = $("#myCanvas").get(0);
            stage = new Stage(canvas1);
            AddBallToStage();
            HideBalls();
            mcPlayerOne.gotoAndStop(1);
            mcPlayerOne.x = 124;
            mcPlayerOne.y = 120;
            mcPlayerOne.callback = onPlayerOneAnim;
            stage.addChild(mcPlayerOne);

            mcPlayerTwo.gotoAndStop("wait_3");
            mcPlayerTwo.x = 266;
            mcPlayerTwo.y = 238;
            mcPlayerTwo.callback = onPlayerTwoAnim;
            stage.addChild(mcPlayerTwo);

            mcPlayerThree.gotoAndStop("wait_3");
            mcPlayerThree.x = 410;
            mcPlayerThree.y = 120;
            mcPlayerThree.callback = onPlayerThreeAnim;
            stage.addChild(mcPlayerThree);

            mcPlayerFour.gotoAndStop("wait_3");
            mcPlayerFour.x = 266;
            mcPlayerFour.y = 210-75;
            mcPlayerFour.callback = onPlayerFourAnim;
            stage.addChild(mcPlayerFour);
            mcPlayerFour.visible = false;

        }

        function ThrowBall(str) {
            //HideBalls();
            mcBall.visible = true;

            switch (str.toLowerCase()) {
                case "one_two":
                    mcBall.x = 214;
                    mcBall.y = 140 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 214 + 30, y: 140 + 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 214 + 30 + 45, y: 140 + 110 / 2 + 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 * 2 }, 500).call(onBallAnim);
                    break;
                case "one_three":
                    mcBall.x = 214;
                    mcBall.y = 140 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 214 + 105, y: 140 - 32 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 415, y: 140 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 360 }, 500).call(onBallAnim);
                    break;
                case "two_one":
                    mcBall.x = 275;
                    mcBall.y = 140 + 110 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 214 + 30, y: 140 + 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 214, y: 140 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 0 }, 500).call(onBallAnim);
                    break;
                case "two_three":
                    mcBall.x = 360;
                    mcBall.y = 250 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 360 + 30, y: 250 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 415, y: 140 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 360 }, 500).call(onBallAnim);
                    break;
                case "three_two":
                    mcBall.x = 415;
                    mcBall.y = 140 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 360 + 30, y: 250 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 360, y: 250 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 00 }, 500).call(onBallAnim);
                    break;
                case "three_one":
                    mcBall.x = 415;
                    mcBall.y = 140 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 214 + 105, y: 140 - 32 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 214, y: 140 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 0 }, 500).call(onBallAnim);
                    break;
                case "one_four":
                    mcBall.x = 214;
                    mcBall.y = 140 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 214 + 30, y: 140 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 214 + 30 + 45, y: 140 - 110 / 2 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 * 2 }, 500).call(onBallAnim);
                    break;
                case "three_four":
                    mcBall.x = 415;
                    mcBall.y = 140 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 360 + 30, y: 140 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 360, y: 140 - 110 / 2 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 00 }, 500).call(onBallAnim);
                    break;
                case "four_one":
                    mcBall.x = 214 + 30 + 45;
                    mcBall.y = 140 - 110 / 2 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 214 + 30, y: 140 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 214, y: 140 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 * 2 }, 500).call(onBallAnim);
                    break;
                case "four_three":
                    mcBall.x = 360;
                    mcBall.y = 140 - 110 / 2 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 360 + 30, y: 140 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 415, y: 140 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 * 2 }, 500).call(onBallAnim);
                    break;
                case "four_two":
                    mcBall.x = 214 + 30 + 45;
                    mcBall.y = 140 - 110 / 2 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 214 + 30 + 45 - 30, y: 250 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 214 + 30 + 45, y: 250 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 359 }, 500).call(onBallAnim);
                    break;
                case "two_four":
                    mcBall.x = 360;
                    mcBall.y = 250 + (isFourPlayer ? fourPlayerOffset : 0);
                    Tween.get(mcBall).to({ x: 360 + 30, y: 125 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 180 }, 500).to({ x: 360, y: 140 - 110 / 2 - 110 / 2 + (isFourPlayer ? fourPlayerOffset : 0), rotation: 359 }, 500).call(onBallAnim);
                    break;
            }
        }

        function GetSettings() {
            var settingsFileURL = "";

            switch (String(URLVars[SETTINGS]).toLowerCase()) {
                case SETTING_3PLALL:
                    settingsFileURL = "3pl - all include.txt";
                    break;
                case SETTING_3PLJO:
                    settingsFileURL = "3pl - just one.txt";
                    break;
                case SETTING_3PLOO:
                    settingsFileURL = "3pl - ostracize other.txt";
                    break;
                case SETTING_3PLOS:
                    settingsFileURL = "3pl - ostracize subject.txt";
                    break;
                case SETTING_4PLALL:
                    settingsFileURL = "4pl - all include.txt";
                    break;
                case SETTING_4PLCOH:
                    settingsFileURL = "4pl - change of heart.txt";
                    break;
                case SETTING_4PLJO:
                    settingsFileURL = "4pl - just one.txt";
                    break;
                case SETTING_4PLOO:
                    settingsFileURL = "4pl - ostracize other.txt";
                    break;
                case SETTING_4PLOS:
                    settingsFileURL = "4pl - ostracize subject.txt";
                    break;
                case SETTING_4PLTAT:
                    settingsFileURL = "4pl - two against two.txt";
                    break;
                default:
                    settingsFileURL = "3pl - all include.txt";
                    break;
            }
            var settingsFile = "";
            $.get("settings/" + settingsFileURL,
                function (data) {
                    settingsFile = data;
                    var settingsArray = settingsFile.split("\n");
                    for (var i = 0; i < settingsArray.length; i++) {
                        var sett = settingsArray[i];
                        if (sett.indexOf("total throws") >= 0) {
                            totalThrows = parseInt(sett.split(",")[1]);
                            //alert(totalThrows);'
                            ////console.log("Total throws - " + totalThrows);
                        }
                        if (sett.indexOf("schedule") >= 0) {
                            var scheduleFileName = (sett.split(",")[1]);
                            //alert((scheduleFileName);
                            LoadSchedule(scheduleFileName);
                        }
                    }
                    if (String(URLVars[SETTINGS]).toLowerCase().indexOf("4pl") >= 0) {
                        //alert("this is a 4 player game");
                        isFourPlayer = true;
                        $("#trPlayerFour").show();
                        mcPlayerOne.y += fourPlayerOffset;
                        mcPlayerTwo.y += fourPlayerOffset;
                        mcPlayerThree.y += fourPlayerOffset;
                        var chatwOffset = $("#chatWindow").offset();
                        $("#chatWindow").offset({ top: chatwOffset.top +124});
                        mcPlayerFour.visible = true;
                        $("#instructions").addClass("fourpl");
                        $(".photo").removeClass("photo").addClass("smallphoto");
                        $(".cartoon-1").removeClass("cartoon-1").addClass("smallcartoon-1");
                        $(".cartoon-3").removeClass("cartoon-3").addClass("smallcartoon-3");
                    }
                    else {
                        isFourPlayer = false;
                        $("#trPlayerFour").hide();
                    }
                });
        }

        function LoadSchedule(scheduleFileName) {

            var scheduleFile = "";
            $.get("schedules/" + $.trim(scheduleFileName),
                function (data) {
                    scheduleFile = data;
                    //alert((scheduleFile);
                    var scheduleFileArray = scheduleFile.split("\n");
                    for (var i = 0; i < scheduleFileArray.length; i++) {
                        var sched = scheduleFileArray[i];
                        if (sched.indexOf("1,") == 0) {
                            playerOneMoves = sched.split(",").reverse();
                            playerOneMoves.pop();
                            playerOneMoves = playerOneMoves.reverse();
                        }
                        if (sched.indexOf("3,") == 0) {
                            playerThreeMoves = sched.split(",").reverse();
                            playerThreeMoves.pop();
                            playerThreeMoves = playerThreeMoves.reverse();
                        }
                        if (sched.indexOf("4,") == 0) {
                            playerFourMoves = sched.split(",").reverse();
                            playerFourMoves.pop();
                            playerFourMoves = playerFourMoves.reverse();
                            //alert(playerFourMoves);
                        }
                    }
                    /*
                    mcBall.gotoAndStop("one_three");
                    mcBall.x = 202;
                    mcBall.y = 116;
                    //HACK: Width of ball
                    mcBall.scaleX = 2;
                    mcBall.scaleY = 2;
                    
                    mcBall.callback = onBallAnim;
                    stage.addChild(mcBall);
                    */
                    stage.update();
                    Ticker.setFPS(30);
                    Ticker.addListener(window);
                    //setTimeout(EndGame, 2 * 60 * 1000);
                    Play();
                });
        }
        function EndGame() {
            SaveLog();
        }
        function SetPlayerOneName(name) {
            if (name && name != "") {
                //Set player Name here
                playerOneName = name;
            }
            else {
                playerOneName = "Player Three";
            }
            $("#lblPlayerOneName").text(playerOneName);
            $("#lblPlayerOneName_2").text(playerOneName);
            //$("#lblPlayerOneName").hide();
            $("#lblPlayerOneName_2").hide();
            if (URLVars[PICS] == "true") {
                $("#imgPlayerOne").attr("src", URLVars[PIC1]);
                $("#lblPlayerOneName").show();
                //$("#imgPlayerOne").show();
            }
            else {
                //$("#lblPlayerOneName_2").show();
                //$("#imgPlayerOne").hide();
                $("#lblPlayerOneName").addClass("name-1");
            }
        }
        function SetPlayerTwoName(name) {
            if (name && name != "") {
                //Set player Name here
                //$("#txtTime").val(name);
                $("#lblPlayerTwoName").text(name);
            }
            else {
                $("#lblPlayerTwoName").text("You");
            }
        }
        function SetPlayerThreeName(name) {
            if (name && name != "") {
                //Set player Name here
                playerThreeName = name;
            }
            else {
                playerThreeName = "Player Three";
            }
            $("#lblPlayerThreeName").text(playerThreeName);
            $("#lblPlayerThreeName_2").text(playerThreeName);
            //$("#lblPlayerThreeName").hide();
            $("#lblPlayerThreeName_2").hide();
            if (URLVars[PICS] == "true") {
                $("#imgPlayerThree").attr("src", URLVars[PIC3]);
                $("#lblPlayerThreeName").show();
            }
            else {
                //$("#lblPlayerThreeName_2").show();
                $("#lblPlayerThreeName").addClass("name-3");
            }
        }

        function SetPlayerFourName(name) {
            if (name && name != "") {
                //Set player Name here
                playerFourName = name;
            }
            else {
                playerFourName = "Player Four";
            }
            $("#lblPlayerFourName").text(playerFourName);
            if (URLVars[PICS] == "true") {
                $("#imgPlayerFour").attr("src", URLVars[PIC4]);
                $("#lblPlayerFourName").show();
            }
            else {
                $("#lblPlayerFourName_2").show();
            }
        }

        function AppendToLog(type, value) {
            switch (type.toLowerCase()) {
                case "chat":
                    _log += URLVars[USERID] + "," + (new Date()) + "," + type + "," + value + "\r\n";
                    break;
                default:
                    _log += URLVars[USERID] + "," + (new Date()) + "," + type + "(" + value + ")" + "\r\n";
                    break;
            }
        }

        function SayHey() {
            $("#txtChatLog").val($("#txtChatLog").val() + $("#lblPlayerOneName").html() + ": Hey!\n");
        }
        function SendChat() {
            if ($.trim($("#txtChatBox").val()) != '') {
                $("#txtChatLog").val($("#txtChatLog").val() + "You: " + $("#txtChatBox").val() + "\n");
                AppendToLog("chat", "\"" + $("#txtChatBox").val() + "\"");
                $("#txtChatBox").val("");
                $("#txtChatLog").scrollTop(999999);
            }
        }

        function SaveLog() {
            if (URLVars[USERID] && $.trim(URLVars[USERID]) != "") {
                $.post("saveLog.php", { userId: URLVars[USERID], log: _log }, function (data) {
                    ShowThankYou();
                });
            }
            //
        }

        function ShowThankYou() {
            document.location.href = "thankyou.htm";
        }

        function tick(deltaTime) {
            //$("#txtTime").val(mcPlayerOne.currentSequence);
            stage.update();
        }

        function ThrowToOne() {
            if (whosTurn == 2 && !isThrowing) {
                throwingTo = 1;
                Throw(1);
            }
        }

        function ThrowToThree() {
            if (whosTurn == 2 && !isThrowing) {
                throwingTo = 3;
                Throw(3);
            }
        }

        function ThrowToFour() {
            if (whosTurn == 2 && !isThrowing) {
                throwingTo = 4;
                Throw(4);
            }
        }
        var isThrowing = false;
        //The Game Starts Here
        $(window).load(function () {
            Init();

            $("#btnChat").click(SendChat);
            $("#txtChatBox").keypress(function (e) {
                if (e.keyCode == 13) {
                    SendChat();
                }
            });
        });
    </script>
</body>
</html>
